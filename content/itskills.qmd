---
title: Selbsteinschätzung der IT-Skills
author: Christian Stankov
lang: de
format: 
  memo-pdf: default
  html: default
---

```{r}
# Laden der benötigten Bibliotheken
library(tidyverse)
library(plotly)
library(ggplot2)
library(lubridate)
library(here)
```

```{r}
# source scripts
source(here("scripts", "color.R"))
```

Die Selbsteinschätzung der IT-Skills wird mithilfe des Quarto-Frameworks erstellt. Der Quellcode wird über GitHub bereitgestellt und anhand eines CI/CD-Prozess automatisch über GitHub-Pages als interaktives HTML-Dokument veröffentlicht:

- [interaktives HTML-Dokument](https://chrisenv.github.io/its/)
- [GitHub Repository](https://github.com/ChrisEnv/its)

Eine Zusammenfassung ist durch @fig-skills gegeben.


# Bewertung der Programmierkenntnisse

Die Bewertung der Programmierkenntnisse erfolgt anhand eines quantifizierbaren Ansatzes. Grundlage ist die Selbsteinschätzung der in Projekten angewandten Kenntnisse in verschiedenen Programmiersprachen, Frameworks und Tools. Die Bewertung erfolgt auf einer Skala von 1 bis 10, wobei 1 für Grundkenntnisse und 10 für Expertenkenntnisse steht. Relevante Projekte und die darin angewandten Kenntnisse sind in @fig-heatmap dargestellt.

```{r}
# create tribble with project data

projects <- tribble(
  ~Project, ~StartDate, ~EndDate,
  "Awattar", "2018-10-01", "2019-01-31",
  "ABM", "2019-10-01", "2020-03-31",
  "HighCon", "2019-01-01", "2020-03-01",
  "DataAnalytics", "2021-07-01", "2021-09-30",
  "LTDis", "2022-01-01", "2022-09-30",
  "Quarto", "2023-08-01", "today",
  "TendeR", "2024-05-01", "today",
  "Faulung", "2023-06-01", "2023-12-31",
  "Trocknung", "2024-03-01", "2024-04-30",
  "Benchmark", "2024-03-01", "today",
)

# replace "today" with current date as character
projects$EndDate[projects$EndDate == "today"] <- Sys.Date() %>% as.character()

# convert dates to Date objects
projects <- projects %>%
  mutate(StartDate = ymd(StartDate), EndDate = ymd(EndDate))

# Convert Project to factor with levels in the correct order
projects$Project <- factor(projects$Project, levels = projects$Project)
```

```{r}
# create tribble with skills for each project

skills <- tribble(
  ~Project, ~Skill, ~Usage,
  "Awattar", "R", 8,
  "Awattar", "API", 7,
  "Awattar", "R-Shiny", 7,
  "Awattar", "Data Analysis", 7,
  "Awattar", "Data Visualization", 7,
  
  "ABM", "R", 7,
  "ABM", "Simulation", 5,
  "ABM", "Data Analysis", 6,
  "ABM", "Data Visualization", 6,
  "ABM", "R-Shiny", 6,
  
  "HighCon", "R", 8,
  "HighCon", "Simulation", 7,
  "HighCon", "Data Preprocessing", 7,
  "HighCon", "Data Analysis", 7,
  "HighCon", "Data Visualization", 6,
  "HighCon", "Shell Scripting", 5,
  
  "DataAnalytics", "R", 9,
  "DataAnalytics", "R-Shiny", 7,
  "DataAnalytics", "Data Preprocessing", 8,
  "DataAnalytics", "Data Analysis", 8,
  "DataAnalytics", "Data Visualization", 7,
  
  "LTDis", "R", 8,
  "LTDis", "Simulation", 6,
  "LTDis", "Data Preprocessing", 7,
  "LTDis", "Data Analysis", 6,
  "LTDis", "Data Visualization", 7,
  "LTDis", "Reporting", 6,
  
  "Quarto", "R", 8,
  "Quarto", "Python", 2,
  "Quarto", "Git", 5,
  "Quarto", "Reporting", 9,
  "Quarto", "SQL", 2,
  "Quarto", "CI/CD", 3,
  "Quarto", "LaTeX", 7,
  "Quarto", "typst", 3,
  "Quarto", "Quarto", 9,
  
  "Faulung", "R", 8,
  "Faulung", "Reporting", 6,
  "Faulung", "Data Preprocessing", 7,
  "Faulung", "Data Analysis", 6,
  "Faulung", "Data Visualization", 6,
  "Faulung", "Git", 5,
  
  "Trocknung", "R", 8,
  "Trocknung", "Data Preprocessing", 6,
  "Trocknung", "Data Analysis", 6,
  "Trocknung", "Data Visualization", 6,
  "Trocknung", "Reporting", 5,
  "Trocknung", "Git", 5,
  
  "Benchmark", "R", 8,
  "Benchmark", "Data Preprocessing", 6,
  "Benchmark", "Data Analysis", 6,
  "Benchmark", "Data Visualization", 6,
  "Benchmark", "Reporting", 4,
  "Benchmark", "Git", 5,
  
  "TendeR", "R", 8,
  "TendeR", "WebScraping", 6,
  "TendeR", "SQL", 3,
  "TendeR", "Data Preprocessing", 6,
)

# left join end date to skills tibble
skills <- left_join(skills, projects, by = "Project")

# order by StartDate
skills <- skills %>% arrange(StartDate)

# Create heatmap
fig <- ggplot(skills, aes(x = Project, y = Skill, fill = Usage)) +
  geom_tile() +
  labs(x = "", y = "") +
  # rename legend
  scale_fill_gradient(name = "Level", low = minimal_palette["light_blue"], high = minimal_palette["muted_blue"]) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
#| fig-cap: Heatmap der Skills
#| label: fig-heatmap

fig
```


```{r}
# Create Gantt chart
fig <- ggplot(projects, aes(x = StartDate, xend = EndDate, y = Project, yend = Project)) +
  geom_segment(linewidth = 5, color = minimal_palette["muted_blue"])+
  labs(x = "", y = "") +
  # add red line for today
  geom_vline(xintercept = Sys.Date(), color = minimal_palette["light_orange"], linetype = "dashed")

# add theme minimal
fig <- fig + theme_minimal()
```

Anhand @fig-gantt wird der Zeitverlauf der Projekte dargestellt.

```{r}
#| fig-cap: Project Timeline Gantt Chart
#| label: fig-gantt

fig
```

Anhand des Enddatums der Projekte und der aktuellen Zeit wird ein Aktualitäts-Faktor der Fähigkeiten berechnet. Eine Fähigkeit, welche in den letzten 365 Tagen verwendet wurde, erhält den Faktor 1. Für jeden weiteren Tag, an dem der Skill nicht verwendet wurde, wird der Wert linear von 1 auf 0 reduziert.

```{r}
#| echo: true

calc_recency_factor <- function(date){
  # calculate difference in days
  diff <- as.numeric(Sys.Date() - date)
  # if the skill was practiced in the last 1 years return 1
  if (diff <= 365) {
    return(1)
  } else {
    # linear decrease from 1 to 0 for skills practiced between 1 and 10 years
    return(max(0, 1 - (diff - 365) / 3285))
  }
}
```

Zusammenfassend ergibt sich für jede Anwendung einer Fähigkeit ein zeitlich gewichteter Wert. Das Maximum jeder Fähigkeit wird als Skill-Level festgehalten und in @fig-skills dargestellt.

```{r}
# calculate recency factor for each skill
skills <- skills %>%
  mutate(Recency = map_dbl(EndDate, calc_recency_factor))

# calculate recency skill
skills <- skills %>% 
  mutate(RecencySkill = Usage * Recency)

# create radar chart based on skills tibble
skills <- skills %>%
  group_by(Skill) %>%
  summarise(Score = max(RecencySkill))

# Erstellen des Radardiagramms
fig <- plot_ly(
  type = 'scatterpolar',
  mode = "markers",
  r = skills$Score,
  theta = skills$Skill,
  fill = 'toself',
  fillcolor = hex_to_rgba(minimal_palette["light_blue"], alpha = 0.7)
)

fig <- fig %>%
  layout(
    polar = list(
      radialaxis = list(
        visible = TRUE,
        range = c(0, 10)
      )
    )
  )
```

```{r}
#| fig-cap: Selbsteinschätzung IT-Skills
#| label: fig-skills

fig
```